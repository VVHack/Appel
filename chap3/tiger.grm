%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | lvalue | rvalue
          | letexp | nonempty_expseq | expseq
          | decs | dec | vardec | tydec | ty | nonempty_tyfields | tyfields | fundec
          | arithmetic

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				()

	
exp: letexp 			() 
   | arithmetic ()
   | LPAREN expseq RPAREN ()
   | lvalue       ()
   | rvalue       ()
   | NIL          ()

lvalue: ID ()
      | lvalue DOT ID ()
      | lvalue LBRACK exp RBRACK ()

rvalue: INT () | STRING ()

letexp: LET decs IN expseq END ()

expseq: () | nonempty_expseq ()
nonempty_expseq: exp ()
               | nonempty_expseq SEMICOLON exp ()

decs: ()
    | dec decs ()

dec: vardec () | tydec () | fundec ()

vardec: VAR ID COLON ID ASSIGN exp ()
      | VAR ID ASSIGN exp ()

tydec: TYPE ID EQ ty ()

ty: ID () | LBRACE tyfields RBRACE () | ARRAY OF ID ()

tyfields: () | nonempty_tyfields ()
nonempty_tyfields: ID COLON ID ()
                 | ID COLON ID COMMA nonempty_tyfields ()

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

arithmetic: exp PLUS exp ()