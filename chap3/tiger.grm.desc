
state 0:

	program : . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 16
	program	goto 141
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 1:

	exp : boolean_operation .  (reduce by rule 16)



	.	reduce by rule 16


state 2:

	exp : comparison .  (reduce by rule 15)



	.	reduce by rule 15


state 3:

	exp : break_exp .  (reduce by rule 14)



	.	reduce by rule 14


state 4:

	exp : for_loop .  (reduce by rule 13)



	.	reduce by rule 13


state 5:

	exp : while_loop .  (reduce by rule 12)



	.	reduce by rule 12


state 6:

	exp : if_then_else .  (reduce by rule 11)



	.	reduce by rule 11


state 7:

	exp : assignment .  (reduce by rule 10)



	.	reduce by rule 10


state 8:

	lvalue : lvalue_complex .  (reduce by rule 54)
	lvalue_complex : lvalue_complex . LBRACK exp RBRACK 

	LBRACK	shift 28


	.	reduce by rule 54


state 9:

	exp : lvalue .  (reduce by rule 6)
	lvalue_complex : lvalue . DOT ID 
	assignment : lvalue . ASSIGN exp 

	DOT	shift 30
	ASSIGN	shift 29


	.	reduce by rule 6


state 10:

	exp : array_creation .  (reduce by rule 8)



	.	reduce by rule 8


state 11:

	array_creation : id_subscript . OF exp 
	lvalue : id_subscript .  (reduce by rule 55)
	lvalue_complex : id_subscript . LBRACK exp RBRACK 

	LBRACK	shift 32
	OF	shift 31


	.	reduce by rule 55


state 12:

	exp : function_call .  (reduce by rule 2)



	.	reduce by rule 2


state 13:

	exp : arithmetic .  (reduce by rule 3)



	.	reduce by rule 3


state 14:

	exp : letexp .  (reduce by rule 1)



	.	reduce by rule 1


state 15:

	exp : rvalue .  (reduce by rule 7)



	.	reduce by rule 7


state 16:

	program : exp .  (reduce by rule 0)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 0


state 17:

	exp : NIL .  (reduce by rule 9)



	.	reduce by rule 9


state 18:

	break_exp : BREAK .  (reduce by rule 63)



	.	reduce by rule 63


state 19:

	letexp : LET . decs IN expseq END 

	FUNCTION	shift 52
	VAR	shift 51
	TYPE	shift 50

	decs	goto 49
	dec	goto 48
	vardec	goto 47
	tydec	goto 46
	fundec	goto 45

	.	reduce by rule 22


state 20:

	for_loop : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 53


	.	error


state 21:

	while_loop : WHILE . exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 54
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 22:

	if_then_else : IF . exp THEN exp 
	if_then_else : IF . exp THEN exp ELSE exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 55
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 23:

	exp : MINUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 56
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 24:

	exp : LPAREN . expseq RPAREN 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 59
	rvalue	goto 15
	letexp	goto 14
	nonempty_expseq	goto 58
	expseq	goto 57
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	reduce by rule 18


state 25:

	rvalue : STRING .  (reduce by rule 58)



	.	reduce by rule 58


state 26:

	rvalue : INT .  (reduce by rule 57)



	.	reduce by rule 57


state 27:

	function_call : ID . LPAREN parameters RPAREN 
	id_subscript : ID . LBRACK exp RBRACK 
	lvalue : ID .  (reduce by rule 53)

	LPAREN	shift 61
	LBRACK	shift 60


	.	reduce by rule 53


state 28:

	lvalue_complex : lvalue_complex LBRACK . exp RBRACK 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 62
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 29:

	assignment : lvalue ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 63
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 30:

	lvalue_complex : lvalue DOT . ID 

	ID	shift 64


	.	error


state 31:

	array_creation : id_subscript OF . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 65
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 32:

	lvalue_complex : id_subscript LBRACK . exp RBRACK 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 66
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 33:

	boolean_operation : exp OR . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 67
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 34:

	boolean_operation : exp AND . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 68
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 35:

	comparison : exp GE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 69
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 36:

	comparison : exp GT . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 70
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 37:

	comparison : exp LE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 71
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 38:

	comparison : exp LT . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 72
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 39:

	comparison : exp NEQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 73
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 40:

	comparison : exp EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 74
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 41:

	arithmetic : exp DIVIDE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 75
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 42:

	arithmetic : exp TIMES . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 76
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 43:

	arithmetic : exp MINUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 77
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 44:

	arithmetic : exp PLUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 78
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 45:

	dec : fundec .  (reduce by rule 26)



	.	reduce by rule 26


state 46:

	dec : tydec .  (reduce by rule 25)



	.	reduce by rule 25


state 47:

	dec : vardec .  (reduce by rule 24)



	.	reduce by rule 24


state 48:

	decs : dec . decs 

	FUNCTION	shift 52
	VAR	shift 51
	TYPE	shift 50

	decs	goto 79
	dec	goto 48
	vardec	goto 47
	tydec	goto 46
	fundec	goto 45

	.	reduce by rule 22


state 49:

	letexp : LET decs . IN expseq END 

	IN	shift 80


	.	error


state 50:

	tydec : TYPE . ID EQ ty 

	ID	shift 81


	.	error


state 51:

	vardec : VAR . ID COLON ID ASSIGN exp 
	vardec : VAR . ID ASSIGN exp 

	ID	shift 82


	.	error


state 52:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 83


	.	error


state 53:

	for_loop : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 84


	.	error


state 54:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	while_loop : WHILE exp . DO exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33
	DO	shift 85


	.	error


state 55:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	if_then_else : IF exp . THEN exp 
	if_then_else : IF exp . THEN exp ELSE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33
	THEN	shift 86


	.	error


state 56:

	exp : MINUS exp .  (reduce by rule 4)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 



	.	reduce by rule 4


state 57:

	exp : LPAREN expseq . RPAREN 

	RPAREN	shift 87


	.	error


state 58:

	nonempty_expseq : nonempty_expseq . SEMICOLON exp 
	expseq : nonempty_expseq .  (reduce by rule 19)

	SEMICOLON	shift 88


	.	reduce by rule 19


state 59:

	nonempty_expseq : exp .  (reduce by rule 20)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 20


state 60:

	id_subscript : ID LBRACK . exp RBRACK 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 89
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 61:

	function_call : ID LPAREN . parameters RPAREN 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 92
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	parameters	goto 91
	nonempty_parameters	goto 90
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	reduce by rule 44


state 62:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	lvalue_complex : lvalue_complex LBRACK exp . RBRACK 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	RBRACK	shift 93
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	error


state 63:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	assignment : lvalue ASSIGN exp .  (reduce by rule 56)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 56


state 64:

	lvalue_complex : lvalue DOT ID .  (reduce by rule 50)



	.	reduce by rule 50


state 65:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	array_creation : id_subscript OF exp .  (reduce by rule 49)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 49


state 66:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	lvalue_complex : id_subscript LBRACK exp . RBRACK 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	RBRACK	shift 94
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	error


state 67:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 
	boolean_operation : exp OR exp .  (reduce by rule 71)

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35


	.	reduce by rule 71


state 68:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp AND exp .  (reduce by rule 70)
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35


	.	reduce by rule 70


state 69:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	comparison : exp GE exp .  (reduce by rule 69)
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 69
	COMMA	reduce by rule 69
	SEMICOLON	reduce by rule 69
	RPAREN	reduce by rule 69
	RBRACK	reduce by rule 69
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	AND	reduce by rule 69
	OR	reduce by rule 69
	THEN	reduce by rule 69
	ELSE	reduce by rule 69
	TO	reduce by rule 69
	DO	reduce by rule 69
	IN	reduce by rule 69
	END	reduce by rule 69
	FUNCTION	reduce by rule 69
	VAR	reduce by rule 69
	TYPE	reduce by rule 69


	.	error


state 70:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp GT exp .  (reduce by rule 67)
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 67
	COMMA	reduce by rule 67
	SEMICOLON	reduce by rule 67
	RPAREN	reduce by rule 67
	RBRACK	reduce by rule 67
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	AND	reduce by rule 67
	OR	reduce by rule 67
	THEN	reduce by rule 67
	ELSE	reduce by rule 67
	TO	reduce by rule 67
	DO	reduce by rule 67
	IN	reduce by rule 67
	END	reduce by rule 67
	FUNCTION	reduce by rule 67
	VAR	reduce by rule 67
	TYPE	reduce by rule 67


	.	error


state 71:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp LE exp .  (reduce by rule 68)
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 68
	COMMA	reduce by rule 68
	SEMICOLON	reduce by rule 68
	RPAREN	reduce by rule 68
	RBRACK	reduce by rule 68
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	AND	reduce by rule 68
	OR	reduce by rule 68
	THEN	reduce by rule 68
	ELSE	reduce by rule 68
	TO	reduce by rule 68
	DO	reduce by rule 68
	IN	reduce by rule 68
	END	reduce by rule 68
	FUNCTION	reduce by rule 68
	VAR	reduce by rule 68
	TYPE	reduce by rule 68


	.	error


state 72:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp LT exp .  (reduce by rule 66)
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 66
	COMMA	reduce by rule 66
	SEMICOLON	reduce by rule 66
	RPAREN	reduce by rule 66
	RBRACK	reduce by rule 66
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	AND	reduce by rule 66
	OR	reduce by rule 66
	THEN	reduce by rule 66
	ELSE	reduce by rule 66
	TO	reduce by rule 66
	DO	reduce by rule 66
	IN	reduce by rule 66
	END	reduce by rule 66
	FUNCTION	reduce by rule 66
	VAR	reduce by rule 66
	TYPE	reduce by rule 66


	.	error


state 73:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp NEQ exp .  (reduce by rule 65)
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 65
	COMMA	reduce by rule 65
	SEMICOLON	reduce by rule 65
	RPAREN	reduce by rule 65
	RBRACK	reduce by rule 65
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	AND	reduce by rule 65
	OR	reduce by rule 65
	THEN	reduce by rule 65
	ELSE	reduce by rule 65
	TO	reduce by rule 65
	DO	reduce by rule 65
	IN	reduce by rule 65
	END	reduce by rule 65
	FUNCTION	reduce by rule 65
	VAR	reduce by rule 65
	TYPE	reduce by rule 65


	.	error


state 74:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp EQ exp .  (reduce by rule 64)
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 64
	COMMA	reduce by rule 64
	SEMICOLON	reduce by rule 64
	RPAREN	reduce by rule 64
	RBRACK	reduce by rule 64
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	AND	reduce by rule 64
	OR	reduce by rule 64
	THEN	reduce by rule 64
	ELSE	reduce by rule 64
	TO	reduce by rule 64
	DO	reduce by rule 64
	IN	reduce by rule 64
	END	reduce by rule 64
	FUNCTION	reduce by rule 64
	VAR	reduce by rule 64
	TYPE	reduce by rule 64


	.	error


state 75:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	arithmetic : exp DIVIDE exp .  (reduce by rule 42)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 



	.	reduce by rule 42


state 76:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp TIMES exp .  (reduce by rule 41)
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 



	.	reduce by rule 41


state 77:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp MINUS exp .  (reduce by rule 40)
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	TIMES	shift 42
	DIVIDE	shift 41


	.	reduce by rule 40


state 78:

	arithmetic : exp . PLUS exp 
	arithmetic : exp PLUS exp .  (reduce by rule 39)
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	TIMES	shift 42
	DIVIDE	shift 41


	.	reduce by rule 39


state 79:

	decs : dec decs .  (reduce by rule 23)



	.	reduce by rule 23


state 80:

	letexp : LET decs IN . expseq END 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 59
	rvalue	goto 15
	letexp	goto 14
	nonempty_expseq	goto 58
	expseq	goto 95
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	reduce by rule 18


state 81:

	tydec : TYPE ID . EQ ty 

	EQ	shift 96


	.	error


state 82:

	vardec : VAR ID . COLON ID ASSIGN exp 
	vardec : VAR ID . ASSIGN exp 

	COLON	shift 98
	ASSIGN	shift 97


	.	error


state 83:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 99


	.	error


state 84:

	for_loop : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 100
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 85:

	while_loop : WHILE exp DO . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 101
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 86:

	if_then_else : IF exp THEN . exp 
	if_then_else : IF exp THEN . exp ELSE exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 102
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 87:

	exp : LPAREN expseq RPAREN .  (reduce by rule 5)



	.	reduce by rule 5


state 88:

	nonempty_expseq : nonempty_expseq SEMICOLON . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 103
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 89:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	id_subscript : ID LBRACK exp . RBRACK 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	RBRACK	shift 104
	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	error


state 90:

	parameters : nonempty_parameters .  (reduce by rule 45)
	nonempty_parameters : nonempty_parameters . COMMA exp 

	COMMA	shift 105


	.	reduce by rule 45


state 91:

	function_call : ID LPAREN parameters . RPAREN 

	RPAREN	shift 106


	.	error


state 92:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	nonempty_parameters : exp .  (reduce by rule 46)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 46


state 93:

	lvalue_complex : lvalue_complex LBRACK exp RBRACK .  (reduce by rule 52)



	.	reduce by rule 52


state 94:

	lvalue_complex : id_subscript LBRACK exp RBRACK .  (reduce by rule 51)



	.	reduce by rule 51


state 95:

	letexp : LET decs IN expseq . END 

	END	shift 107


	.	error


state 96:

	tydec : TYPE ID EQ . ty 

	ID	shift 111
	LBRACE	shift 110
	ARRAY	shift 109

	ty	goto 108

	.	error


state 97:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 112
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 98:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 113


	.	error


state 99:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 116

	nonempty_tyfields	goto 115
	tyfields	goto 114

	.	reduce by rule 33


state 100:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	for_loop : FOR ID ASSIGN exp . TO exp DO exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33
	TO	shift 117


	.	error


state 101:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	while_loop : WHILE exp DO exp .  (reduce by rule 61)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 61


state 102:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	if_then_else : IF exp THEN exp .  (reduce by rule 59)
	if_then_else : IF exp THEN exp . ELSE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33
	ELSE	shift 118


	.	reduce by rule 59


state 103:

	nonempty_expseq : nonempty_expseq SEMICOLON exp .  (reduce by rule 21)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 21


state 104:

	id_subscript : ID LBRACK exp RBRACK .  (reduce by rule 48)



	.	reduce by rule 48


state 105:

	nonempty_parameters : nonempty_parameters COMMA . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 119
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 106:

	function_call : ID LPAREN parameters RPAREN .  (reduce by rule 43)



	.	reduce by rule 43


state 107:

	letexp : LET decs IN expseq END .  (reduce by rule 17)



	.	reduce by rule 17


state 108:

	tydec : TYPE ID EQ ty .  (reduce by rule 29)



	.	reduce by rule 29


state 109:

	ty : ARRAY . OF ID 

	OF	shift 120


	.	error


state 110:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 116

	nonempty_tyfields	goto 115
	tyfields	goto 121

	.	reduce by rule 33


state 111:

	ty : ID .  (reduce by rule 30)



	.	reduce by rule 30


state 112:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 28)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 28


state 113:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 122


	.	error


state 114:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 123


	.	error


state 115:

	tyfields : nonempty_tyfields .  (reduce by rule 34)



	.	reduce by rule 34


state 116:

	nonempty_tyfields : ID . COLON ID 
	nonempty_tyfields : ID . COLON ID COMMA nonempty_tyfields 

	COLON	shift 124


	.	error


state 117:

	for_loop : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 125
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 118:

	if_then_else : IF exp THEN exp ELSE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 126
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 119:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	nonempty_parameters : nonempty_parameters COMMA exp .  (reduce by rule 47)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 47


state 120:

	ty : ARRAY OF . ID 

	ID	shift 127


	.	error


state 121:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 128


	.	error


state 122:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 129
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 123:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 131
	EQ	shift 130


	.	error


state 124:

	nonempty_tyfields : ID COLON . ID 
	nonempty_tyfields : ID COLON . ID COMMA nonempty_tyfields 

	ID	shift 132


	.	error


state 125:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	for_loop : FOR ID ASSIGN exp TO exp . DO exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33
	DO	shift 133


	.	error


state 126:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	if_then_else : IF exp THEN exp ELSE exp .  (reduce by rule 60)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 60


state 127:

	ty : ARRAY OF ID .  (reduce by rule 32)



	.	reduce by rule 32


state 128:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 31)



	.	reduce by rule 31


state 129:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 27)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 27


state 130:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 134
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 131:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 135


	.	error


state 132:

	nonempty_tyfields : ID COLON ID .  (reduce by rule 35)
	nonempty_tyfields : ID COLON ID . COMMA nonempty_tyfields 

	COMMA	shift 136


	.	reduce by rule 35


state 133:

	for_loop : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 137
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 134:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 37)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 37


state 135:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 138


	.	error


state 136:

	nonempty_tyfields : ID COLON ID COMMA . nonempty_tyfields 

	ID	shift 116

	nonempty_tyfields	goto 139

	.	error


state 137:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	for_loop : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 62)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 62


state 138:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 140
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 139:

	nonempty_tyfields : ID COLON ID COMMA nonempty_tyfields .  (reduce by rule 36)



	.	reduce by rule 36


state 140:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 38)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 44
	MINUS	shift 43
	TIMES	shift 42
	DIVIDE	shift 41
	EQ	shift 40
	NEQ	shift 39
	LT	shift 38
	LE	shift 37
	GT	shift 36
	GE	shift 35
	AND	shift 34
	OR	shift 33


	.	reduce by rule 38


state 141:


	EOF	accept


	.	error

494 of 1003 action table entries left after compaction
599 goto table entries
