
state 0:

	program : . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 16
	program	goto 138
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 1:

	exp : boolean_operation .  (reduce by rule 16)



	.	reduce by rule 16


state 2:

	exp : comparison .  (reduce by rule 15)



	.	reduce by rule 15


state 3:

	exp : break_exp .  (reduce by rule 14)



	.	reduce by rule 14


state 4:

	exp : for_loop .  (reduce by rule 13)



	.	reduce by rule 13


state 5:

	exp : while_loop .  (reduce by rule 12)



	.	reduce by rule 12


state 6:

	exp : if_then_else .  (reduce by rule 11)



	.	reduce by rule 11


state 7:

	exp : assignment .  (reduce by rule 10)



	.	reduce by rule 10


state 8:

	lvalue : lvalue_complex .  (reduce by rule 53)
	lvalue_complex : lvalue_complex . LBRACK exp RBRACK 

	LBRACK	shift 28


	.	reduce by rule 53


state 9:

	exp : lvalue .  (reduce by rule 6)
	lvalue_complex : lvalue . DOT ID 
	assignment : lvalue . ASSIGN exp 

	DOT	shift 30
	ASSIGN	shift 29


	.	reduce by rule 6


state 10:

	exp : array_creation .  (reduce by rule 8)



	.	reduce by rule 8


state 11:

	array_creation : id_subscript . OF exp 
	lvalue : id_subscript .  (reduce by rule 54)

	OF	shift 31


	.	reduce by rule 54


state 12:

	exp : function_call .  (reduce by rule 2)



	.	reduce by rule 2


state 13:

	exp : arithmetic .  (reduce by rule 3)



	.	reduce by rule 3


state 14:

	exp : letexp .  (reduce by rule 1)



	.	reduce by rule 1


state 15:

	exp : rvalue .  (reduce by rule 7)



	.	reduce by rule 7


state 16:

	program : exp .  (reduce by rule 0)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 0


state 17:

	exp : NIL .  (reduce by rule 9)



	.	reduce by rule 9


state 18:

	break_exp : BREAK .  (reduce by rule 62)



	.	reduce by rule 62


state 19:

	letexp : LET . decs IN expseq END 

	FUNCTION	shift 51
	VAR	shift 50
	TYPE	shift 49

	decs	goto 48
	dec	goto 47
	vardec	goto 46
	tydec	goto 45
	fundec	goto 44

	.	reduce by rule 22


state 20:

	for_loop : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 52


	.	error


state 21:

	while_loop : WHILE . exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 53
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 22:

	if_then_else : IF . exp THEN exp 
	if_then_else : IF . exp THEN exp ELSE exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 54
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 23:

	exp : MINUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 55
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 24:

	exp : LPAREN . expseq RPAREN 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 58
	rvalue	goto 15
	letexp	goto 14
	nonempty_expseq	goto 57
	expseq	goto 56
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	reduce by rule 18


state 25:

	rvalue : STRING .  (reduce by rule 57)



	.	reduce by rule 57


state 26:

	rvalue : INT .  (reduce by rule 56)



	.	reduce by rule 56


state 27:

	function_call : ID . LPAREN parameters RPAREN 
	id_subscript : ID . LBRACK exp RBRACK 
	lvalue : ID .  (reduce by rule 52)

	LPAREN	shift 60
	LBRACK	shift 59


	.	reduce by rule 52


state 28:

	lvalue_complex : lvalue_complex LBRACK . exp RBRACK 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 61
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 29:

	assignment : lvalue ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 62
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 30:

	lvalue_complex : lvalue DOT . ID 

	ID	shift 63


	.	error


state 31:

	array_creation : id_subscript OF . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 64
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 32:

	boolean_operation : exp OR . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 65
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 33:

	boolean_operation : exp AND . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 66
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 34:

	comparison : exp GE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 67
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 35:

	comparison : exp GT . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 68
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 36:

	comparison : exp LE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 69
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 37:

	comparison : exp LT . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 70
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 38:

	comparison : exp NEQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 71
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 39:

	comparison : exp EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 72
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 40:

	arithmetic : exp DIVIDE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 73
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 41:

	arithmetic : exp TIMES . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 74
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 42:

	arithmetic : exp MINUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 75
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 43:

	arithmetic : exp PLUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 76
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 44:

	dec : fundec .  (reduce by rule 26)



	.	reduce by rule 26


state 45:

	dec : tydec .  (reduce by rule 25)



	.	reduce by rule 25


state 46:

	dec : vardec .  (reduce by rule 24)



	.	reduce by rule 24


state 47:

	decs : dec . decs 

	FUNCTION	shift 51
	VAR	shift 50
	TYPE	shift 49

	decs	goto 77
	dec	goto 47
	vardec	goto 46
	tydec	goto 45
	fundec	goto 44

	.	reduce by rule 22


state 48:

	letexp : LET decs . IN expseq END 

	IN	shift 78


	.	error


state 49:

	tydec : TYPE . ID EQ ty 

	ID	shift 79


	.	error


state 50:

	vardec : VAR . ID COLON ID ASSIGN exp 
	vardec : VAR . ID ASSIGN exp 

	ID	shift 80


	.	error


state 51:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 81


	.	error


state 52:

	for_loop : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 82


	.	error


state 53:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	while_loop : WHILE exp . DO exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32
	DO	shift 83


	.	error


state 54:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	if_then_else : IF exp . THEN exp 
	if_then_else : IF exp . THEN exp ELSE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32
	THEN	shift 84


	.	error


state 55:

	exp : MINUS exp .  (reduce by rule 4)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 



	.	reduce by rule 4


state 56:

	exp : LPAREN expseq . RPAREN 

	RPAREN	shift 85


	.	error


state 57:

	nonempty_expseq : nonempty_expseq . SEMICOLON exp 
	expseq : nonempty_expseq .  (reduce by rule 19)

	SEMICOLON	shift 86


	.	reduce by rule 19


state 58:

	nonempty_expseq : exp .  (reduce by rule 20)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 20


state 59:

	id_subscript : ID LBRACK . exp RBRACK 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 87
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 60:

	function_call : ID LPAREN . parameters RPAREN 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 90
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	parameters	goto 89
	nonempty_parameters	goto 88
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	reduce by rule 44


state 61:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	lvalue_complex : lvalue_complex LBRACK exp . RBRACK 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	RBRACK	shift 91
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	error


state 62:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	assignment : lvalue ASSIGN exp .  (reduce by rule 55)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 55


state 63:

	lvalue_complex : lvalue DOT ID .  (reduce by rule 50)



	.	reduce by rule 50


state 64:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	array_creation : id_subscript OF exp .  (reduce by rule 49)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 49


state 65:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 
	boolean_operation : exp OR exp .  (reduce by rule 70)

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34


	.	reduce by rule 70


state 66:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp AND exp .  (reduce by rule 69)
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34


	.	reduce by rule 69


state 67:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	comparison : exp GE exp .  (reduce by rule 68)
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 68
	COMMA	reduce by rule 68
	SEMICOLON	reduce by rule 68
	RPAREN	reduce by rule 68
	RBRACK	reduce by rule 68
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	AND	reduce by rule 68
	OR	reduce by rule 68
	THEN	reduce by rule 68
	ELSE	reduce by rule 68
	TO	reduce by rule 68
	DO	reduce by rule 68
	IN	reduce by rule 68
	END	reduce by rule 68
	FUNCTION	reduce by rule 68
	VAR	reduce by rule 68
	TYPE	reduce by rule 68


	.	error


state 68:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp GT exp .  (reduce by rule 66)
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 66
	COMMA	reduce by rule 66
	SEMICOLON	reduce by rule 66
	RPAREN	reduce by rule 66
	RBRACK	reduce by rule 66
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	AND	reduce by rule 66
	OR	reduce by rule 66
	THEN	reduce by rule 66
	ELSE	reduce by rule 66
	TO	reduce by rule 66
	DO	reduce by rule 66
	IN	reduce by rule 66
	END	reduce by rule 66
	FUNCTION	reduce by rule 66
	VAR	reduce by rule 66
	TYPE	reduce by rule 66


	.	error


state 69:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp LE exp .  (reduce by rule 67)
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 67
	COMMA	reduce by rule 67
	SEMICOLON	reduce by rule 67
	RPAREN	reduce by rule 67
	RBRACK	reduce by rule 67
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	AND	reduce by rule 67
	OR	reduce by rule 67
	THEN	reduce by rule 67
	ELSE	reduce by rule 67
	TO	reduce by rule 67
	DO	reduce by rule 67
	IN	reduce by rule 67
	END	reduce by rule 67
	FUNCTION	reduce by rule 67
	VAR	reduce by rule 67
	TYPE	reduce by rule 67


	.	error


state 70:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp LT exp .  (reduce by rule 65)
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 65
	COMMA	reduce by rule 65
	SEMICOLON	reduce by rule 65
	RPAREN	reduce by rule 65
	RBRACK	reduce by rule 65
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	AND	reduce by rule 65
	OR	reduce by rule 65
	THEN	reduce by rule 65
	ELSE	reduce by rule 65
	TO	reduce by rule 65
	DO	reduce by rule 65
	IN	reduce by rule 65
	END	reduce by rule 65
	FUNCTION	reduce by rule 65
	VAR	reduce by rule 65
	TYPE	reduce by rule 65


	.	error


state 71:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp NEQ exp .  (reduce by rule 64)
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 64
	COMMA	reduce by rule 64
	SEMICOLON	reduce by rule 64
	RPAREN	reduce by rule 64
	RBRACK	reduce by rule 64
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	AND	reduce by rule 64
	OR	reduce by rule 64
	THEN	reduce by rule 64
	ELSE	reduce by rule 64
	TO	reduce by rule 64
	DO	reduce by rule 64
	IN	reduce by rule 64
	END	reduce by rule 64
	FUNCTION	reduce by rule 64
	VAR	reduce by rule 64
	TYPE	reduce by rule 64


	.	error


state 72:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp EQ exp .  (reduce by rule 63)
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	EOF	reduce by rule 63
	COMMA	reduce by rule 63
	SEMICOLON	reduce by rule 63
	RPAREN	reduce by rule 63
	RBRACK	reduce by rule 63
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	AND	reduce by rule 63
	OR	reduce by rule 63
	THEN	reduce by rule 63
	ELSE	reduce by rule 63
	TO	reduce by rule 63
	DO	reduce by rule 63
	IN	reduce by rule 63
	END	reduce by rule 63
	FUNCTION	reduce by rule 63
	VAR	reduce by rule 63
	TYPE	reduce by rule 63


	.	error


state 73:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	arithmetic : exp DIVIDE exp .  (reduce by rule 42)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 



	.	reduce by rule 42


state 74:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp TIMES exp .  (reduce by rule 41)
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 



	.	reduce by rule 41


state 75:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp MINUS exp .  (reduce by rule 40)
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	TIMES	shift 41
	DIVIDE	shift 40


	.	reduce by rule 40


state 76:

	arithmetic : exp . PLUS exp 
	arithmetic : exp PLUS exp .  (reduce by rule 39)
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	TIMES	shift 41
	DIVIDE	shift 40


	.	reduce by rule 39


state 77:

	decs : dec decs .  (reduce by rule 23)



	.	reduce by rule 23


state 78:

	letexp : LET decs IN . expseq END 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 58
	rvalue	goto 15
	letexp	goto 14
	nonempty_expseq	goto 57
	expseq	goto 92
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	reduce by rule 18


state 79:

	tydec : TYPE ID . EQ ty 

	EQ	shift 93


	.	error


state 80:

	vardec : VAR ID . COLON ID ASSIGN exp 
	vardec : VAR ID . ASSIGN exp 

	COLON	shift 95
	ASSIGN	shift 94


	.	error


state 81:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 96


	.	error


state 82:

	for_loop : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 97
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 83:

	while_loop : WHILE exp DO . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 98
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 84:

	if_then_else : IF exp THEN . exp 
	if_then_else : IF exp THEN . exp ELSE exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 99
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 85:

	exp : LPAREN expseq RPAREN .  (reduce by rule 5)



	.	reduce by rule 5


state 86:

	nonempty_expseq : nonempty_expseq SEMICOLON . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 100
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 87:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	id_subscript : ID LBRACK exp . RBRACK 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	RBRACK	shift 101
	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	error


state 88:

	parameters : nonempty_parameters .  (reduce by rule 45)
	nonempty_parameters : nonempty_parameters . COMMA exp 

	COMMA	shift 102


	.	reduce by rule 45


state 89:

	function_call : ID LPAREN parameters . RPAREN 

	RPAREN	shift 103


	.	error


state 90:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	nonempty_parameters : exp .  (reduce by rule 46)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 46


state 91:

	lvalue_complex : lvalue_complex LBRACK exp RBRACK .  (reduce by rule 51)



	.	reduce by rule 51


state 92:

	letexp : LET decs IN expseq . END 

	END	shift 104


	.	error


state 93:

	tydec : TYPE ID EQ . ty 

	ID	shift 108
	LBRACE	shift 107
	ARRAY	shift 106

	ty	goto 105

	.	error


state 94:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 109
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 95:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 110


	.	error


state 96:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 113

	nonempty_tyfields	goto 112
	tyfields	goto 111

	.	reduce by rule 33


state 97:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	for_loop : FOR ID ASSIGN exp . TO exp DO exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32
	TO	shift 114


	.	error


state 98:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	while_loop : WHILE exp DO exp .  (reduce by rule 60)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 60


state 99:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	if_then_else : IF exp THEN exp .  (reduce by rule 58)
	if_then_else : IF exp THEN exp . ELSE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32
	ELSE	shift 115


	.	reduce by rule 58


state 100:

	nonempty_expseq : nonempty_expseq SEMICOLON exp .  (reduce by rule 21)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 21


state 101:

	id_subscript : ID LBRACK exp RBRACK .  (reduce by rule 48)



	.	reduce by rule 48


state 102:

	nonempty_parameters : nonempty_parameters COMMA . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 116
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 103:

	function_call : ID LPAREN parameters RPAREN .  (reduce by rule 43)



	.	reduce by rule 43


state 104:

	letexp : LET decs IN expseq END .  (reduce by rule 17)



	.	reduce by rule 17


state 105:

	tydec : TYPE ID EQ ty .  (reduce by rule 29)



	.	reduce by rule 29


state 106:

	ty : ARRAY . OF ID 

	OF	shift 117


	.	error


state 107:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 113

	nonempty_tyfields	goto 112
	tyfields	goto 118

	.	reduce by rule 33


state 108:

	ty : ID .  (reduce by rule 30)



	.	reduce by rule 30


state 109:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 28)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 28


state 110:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 119


	.	error


state 111:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 120


	.	error


state 112:

	tyfields : nonempty_tyfields .  (reduce by rule 34)



	.	reduce by rule 34


state 113:

	nonempty_tyfields : ID . COLON ID 
	nonempty_tyfields : ID . COLON ID COMMA nonempty_tyfields 

	COLON	shift 121


	.	error


state 114:

	for_loop : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 122
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 115:

	if_then_else : IF exp THEN exp ELSE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 123
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 116:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	nonempty_parameters : nonempty_parameters COMMA exp .  (reduce by rule 47)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 47


state 117:

	ty : ARRAY OF . ID 

	ID	shift 124


	.	error


state 118:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 125


	.	error


state 119:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 126
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 120:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 128
	EQ	shift 127


	.	error


state 121:

	nonempty_tyfields : ID COLON . ID 
	nonempty_tyfields : ID COLON . ID COMMA nonempty_tyfields 

	ID	shift 129


	.	error


state 122:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	for_loop : FOR ID ASSIGN exp TO exp . DO exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32
	DO	shift 130


	.	error


state 123:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	if_then_else : IF exp THEN exp ELSE exp .  (reduce by rule 59)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 59


state 124:

	ty : ARRAY OF ID .  (reduce by rule 32)



	.	reduce by rule 32


state 125:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 31)



	.	reduce by rule 31


state 126:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 27)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 27


state 127:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 131
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 128:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 132


	.	error


state 129:

	nonempty_tyfields : ID COLON ID .  (reduce by rule 35)
	nonempty_tyfields : ID COLON ID . COMMA nonempty_tyfields 

	COMMA	shift 133


	.	reduce by rule 35


state 130:

	for_loop : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 134
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 131:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 37)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 37


state 132:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 135


	.	error


state 133:

	nonempty_tyfields : ID COLON ID COMMA . nonempty_tyfields 

	ID	shift 113

	nonempty_tyfields	goto 136

	.	error


state 134:

	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	for_loop : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 61)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 61


state 135:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	MINUS	shift 23
	IF	shift 22
	WHILE	shift 21
	FOR	shift 20
	LET	shift 19
	BREAK	shift 18
	NIL	shift 17

	exp	goto 137
	rvalue	goto 15
	letexp	goto 14
	arithmetic	goto 13
	function_call	goto 12
	id_subscript	goto 11
	array_creation	goto 10
	lvalue	goto 9
	lvalue_complex	goto 8
	assignment	goto 7
	if_then_else	goto 6
	while_loop	goto 5
	for_loop	goto 4
	break_exp	goto 3
	comparison	goto 2
	boolean_operation	goto 1

	.	error


state 136:

	nonempty_tyfields : ID COLON ID COMMA nonempty_tyfields .  (reduce by rule 36)



	.	reduce by rule 36


state 137:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 38)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . GT exp 
	comparison : exp . LE exp 
	comparison : exp . GE exp 
	boolean_operation : exp . AND exp 
	boolean_operation : exp . OR exp 

	PLUS	shift 43
	MINUS	shift 42
	TIMES	shift 41
	DIVIDE	shift 40
	EQ	shift 39
	NEQ	shift 38
	LT	shift 37
	LE	shift 36
	GT	shift 35
	GE	shift 34
	AND	shift 33
	OR	shift 32


	.	reduce by rule 38


state 138:


	EOF	accept


	.	error

480 of 975 action table entries left after compaction
583 goto table entries
